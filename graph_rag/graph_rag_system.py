from typing import Optional
from graph_rag.rag_store import GraphRAGStore
from graph_rag.rag_extractor import GraphRAGExtractor
from graph_rag.rag_query_engine import GraphRAGQueryEngine
from llama_index.core import PropertyGraphIndex
from llama_index.llms.openai import OpenAI
from graph_rag.utils import TranscriptionParser


class GraphRAGSystem:
    """
    A class representing a Graph RAG (Retrieval-Augmented Generation) system.

    This system processes transcriptions, builds a knowledge graph, and
    provides a query interface for information retrieval and generation.
    """

    def __init__(
        self,
        transcription_with_char_timestamps: str,
        neo4j_username: str,
        neo4j_password: str,
        neo4j_url: str,
    ) -> None:
        """
        Initialize the GraphRAGSystem.

        Args:
            transcription_with_char_timestamps (str): The transcription text
                with character timestamps.
            neo4j_username (str): Username for Neo4j database connection.
            neo4j_password (str): Password for Neo4j database connection.
            neo4j_url (str): URL for Neo4j database connection.
        """
        self.transcription_with_char_timestamps: str = (
            transcription_with_char_timestamps
        )
        self.neo4j_username: str = neo4j_username
        self.neo4j_password: str = neo4j_password
        self.neo4j_url: str = neo4j_url

        self.kg_extractor: Optional[GraphRAGExtractor] = None
        self.graph_store: Optional[GraphRAGStore] = None
        self.transcription_parser: Optional[TranscriptionParser] = None
        self.index: Optional[PropertyGraphIndex] = None
        self.default_llm: Optional[OpenAI] = None
        self.query_engine: Optional[GraphRAGQueryEngine] = None

        self._initialize_components()

    def _initialize_components(self) -> None:
        """
        Initialize all components of the GraphRAGSystem.
        """
        self.kg_extractor = GraphRAGExtractor(max_paths_per_chunk=4)
        self.graph_store = GraphRAGStore(
            username=self.neo4j_username,
            password=self.neo4j_password,
            url=self.neo4j_url,
        )
        self.transcription_parser = TranscriptionParser(
            self.transcription_with_char_timestamps
        )

        self._build_index()
        self._build_communities()
        self._setup_llm()
        self._setup_query_engine()

    def _build_index(self) -> None:
        """
        Build the PropertyGraphIndex using the parsed transcription nodes.
        """
        self.index = PropertyGraphIndex(
            nodes=self.transcription_parser.get_nodes(),
            kg_extractors=[self.kg_extractor],
            property_graph_store=self.graph_store,
            show_progress=True,
        )

    def _build_communities(self) -> None:
        """
        Build communities in the property graph store.
        """
        self.index.property_graph_store.build_communities()

    def _setup_llm(self) -> None:
        """
        Set up the default language model (LLM) for the system.
        """
        self.default_llm = OpenAI(model="gpt-3.5-turbo")

    def _setup_query_engine(self) -> None:
        """
        Set up the GraphRAGQueryEngine for processing queries.
        """
        self.query_engine = GraphRAGQueryEngine(
            graph_store=self.index.property_graph_store,
            llm=self.default_llm,
            index=self.index,
            similarity_top_k=10,
            num_children=10,
        )

    def query(self, query_text: str) -> str:
        """
        Process a query using the GraphRAGQueryEngine.

        Args:
            query_text (str): The text of the query to process.

        Returns:
            str: The response generated by the query engine.
        """
        return self.query_engine.custom_query(query_text)


def create_graph_rag_system(
    transcription_with_char_timestamps: str,
    neo4j_username: str,
    neo4j_password: str,
    neo4j_url: str,
) -> GraphRAGSystem:
    """
    Create and return a new instance of GraphRAGSystem.

    Args:
        transcription_with_char_timestamps (str): The transcription text with
            character timestamps.
        neo4j_username (str): Username for Neo4j database connection.
        neo4j_password (str): Password for Neo4j database connection.
        neo4j_url (str): URL for Neo4j database connection.

    Returns:
        GraphRAGSystem: A new instance of the GraphRAGSystem.
    """
    return GraphRAGSystem(
        transcription_with_char_timestamps,
        neo4j_username,
        neo4j_password,
        neo4j_url,
    )
